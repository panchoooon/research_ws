#include <ros/ros.h>
#include <sensor_msgs/PointCloud2.h>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>
#include <pcl/filters/voxel_grid.h>

ros::Publisher pub;

void
cloud_cb (const sensor_msgs::PointCloud2ConstPtr& cloud_msg)
{
  // Container for original & filtered data
  pcl::PCLPointCloud2* cloud = new pcl::PCLPointCloud2;
  pcl::PCLPointCloud2ConstPtr cloudPtr(cloud);
  pcl::PCLPointCloud2 cloud_filtered;

  // Convert to PCL data type
  pcl_conversions::toPCL(*cloud_msg, *cloud);

  // Perform the actual filtering
  pcl::VoxelGrid<pcl::PCLPointCloud2> sor;
  sor.setInputCloud (cloudPtr);

  double down_rate;
  ros::param::get("down_rate", down_rate);
  // sor.setLeafSize (0.1, 0.1, 0.1);
  sor.setLeafSize (down_rate, down_rate, down_rate);
  sor.filter (cloud_filtered);

  // Convert to ROS data type
  sensor_msgs::PointCloud2 output;
  pcl_conversions::fromPCL(cloud_filtered, output);

  // Publish the data
 //pub.publish (output);
}






int
main (int argc, char** argv)
{
	ros::init(argc, argv, "clustered"); //ノード名をclusteredにしてノードを初期化
	ros::NodeHandle nh; //rosシステムとの通信に用いる


	ros::param::set("down_rate", 0.1); //down_rateというパラメータを0.1に設定


	//入力点群の為の操作
	ros::Subscriber sub = nh.subscribe("input", 1, cloud_cb);//("topic名","キューサイズ",callback関数)
	
	//出力用の点群をpublishする為の操作
	pub = nh.advertise<sensor_msgs::PointCloud2> ("clustered", 1); //<メッセージの型>("ノード名")



	ros::spin();
}
